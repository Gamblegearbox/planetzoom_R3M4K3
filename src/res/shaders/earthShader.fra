//https://www.opengl.org/sdk/docs/tutorials/ClockworkCoders/lighting.php
//http://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl

#version 330
#pragma debug(on)
#pragma optimize(off)

in DATA {
	vec3 position;
	vec3 normal;
	vec2 uv;
} pass_data;

uniform float radius;
uniform vec3 cameraPosition;
uniform vec3 lightPosition;
uniform float mountainHeight;

out vec4 out_Color;

void singleColor(float value) {
	out_Color = vec4(value, value, value, 1.0);
}


void main(void) {	
	vec4 heightColor;
	
	float height = length(pass_data.position) - radius;
	float maxHeight = radius * mountainHeight;

	float heightGradientValue = height / maxHeight;
 
 	float ambient = 0.3;
	vec3 normal = normalize(pass_data.normal);
	vec3 lightDir = normalize(lightPosition - pass_data.position);
	float diffuse = max(dot(normal, lightDir), 0.0);

	//ColorBorders
	float snow = 0.94;
	float stone = 0.7;
	float grass = 0.06;
	float sand = 0.04;
	float mul = 1.0;

	if(heightGradientValue > snow){
		mul = heightGradientValue;
		heightColor = vec4(0.87 * mul, 0.90 * mul, 0.89 * mul, 1.0);
	}
	else if(heightGradientValue > stone) {
		mul = heightGradientValue + 1 - stone;
		heightColor = vec4(0.6 * mul, 0.56 * mul, 0.39 * mul, 1.0);
	}
	else if(heightGradientValue > grass) {
		mul = heightGradientValue + 1 - grass;
		heightColor = vec4(0.22 * mul, 0.58 * mul, 0.28 * mul, 1.0);
	}
	else {
		mul = heightGradientValue + 1 - sand;
		heightColor = vec4(0.89 * mul, 0.78 * mul, 0.41 * mul, 1.0);
	}

	float lightResult = ambient + diffuse;

	out_Color = (diffuse + ambient) * heightColor;
	
	
	/*HEIGHTLINES
	if(	(heightGradientValue > sand && heightGradientValue < sand + 0.001) 	 || 
		(heightGradientValue > grass && heightGradientValue < grass + 0.002) ||
		(heightGradientValue > stone && heightGradientValue < stone + 0.003) ||
		(heightGradientValue > snow && heightGradientValue < snow + 0.004))
	{
		singleColor(0.0);
	}*/
	
	/*OUTLINES
	if(dot(pass_data.viewDir, pass_data.normal) < mix(0.5, 0.1, max(0.0, dot(pass_data.normal, pass_data.lightDir))))
	{
		singleColor(0.0);
	}
	else
	{
		finalColor(heightColor, lightDiffuse, ambient)
	}*/
	
}