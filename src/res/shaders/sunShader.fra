#version 460 

in vec2 uv;
out vec4 out_Color;

uniform float time;

vec2 random2( vec2 p ) {
    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);
}

void main(void) {

	float animSin = 0.5 * sin(time);
	float animCos = 0.5 * cos(time);

	//SUN BASE
	vec2 center = vec2(0.5,0.5);
	float dist = distance(center, uv);
	float coreGlow = smoothstep(0.35, 0.2, dist);
	float softGlow = smoothstep(0.49, 0.2, dist);
	float bursts = 0.0;

	// Scale
    vec2 st = uv * 2.0;

    // Tile the space
    vec2 i_st = floor(st);
    vec2 f_st = fract(st);

	float m_dist = 1.;  // minimum distance

	for (int y= -1; y <= 1; y++) {
        for (int x= -1; x <= 1; x++) {
            // Neighbor place in the grid
            vec2 neighbor = vec2(float(x),float(y));

            // Random position from current + neighbor place in the grid
            vec2 point = random2(i_st + neighbor);

			// Animate the point
            point = 0.5 + 0.5*sin(time * 0.5 + 5.443 *point);

			// Vector between the pixel and the point
            vec2 diff = neighbor + point - f_st;

            // Distance to the point
            float dist = length(diff);

            // Keep the closer distance
            m_dist = min(m_dist, dist);
        }
    }

    // Add distance field to closest point center
    bursts += m_dist;

	vec4 sunColor = vec4(1.0, 1.0 - dist, 0.0, 1.0) * softGlow + coreGlow * (1.3 - bursts); 

	out_Color = sunColor;
}
